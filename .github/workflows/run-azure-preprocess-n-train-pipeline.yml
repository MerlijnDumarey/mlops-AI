name: Run Azure ML Dataprep and Training Pipelines

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'pipelines/**.yaml'
      - '.github/workflows/run-azure-preprocess-n-train-pipeline.yml'

env:
  GROUP: mlops-project
  WORKSPACE: mlops-project-ai
  LOCATION: westeurope
  # DEFINE THESE:
  MODEL_NAME_IN_AML: "movement-classification" # Should match the name used in pipelines/training.yaml's register job
  API_REPOSITORY_FULL_NAME: "MerlijnDumarey/mlops-APP" # Your APP repository

jobs:
  deploy-to-kubernetes: # Consider renaming this job to something like 'train-and-trigger-deploy'
    strategy:
      fail-fast: false
      matrix:
        runner: [self-hosted, ubuntu-latest] # Using self-hosted for all steps now
    runs-on: ${{ matrix.runner }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Install Azure ML CLI extension
      run: |
        python3 -m venv .venv
        source .venv/bin/activate
        pip install --upgrade pip
        pip install rpds-py # If still needed by other scripts
        az extension remove --name ml || true
        az extension add --name ml --allow-preview
        az configure --defaults group=$GROUP workspace=$WORKSPACE location=$LOCATION

    - name: Create Azure ML Compute
      run: |
        az ml compute create --file ./environment/compute.yaml
      continue-on-error: true # likely already exists

    - name: Start Azure ML Compute
      run: |
        az ml compute start --name ai-training-compute
      continue-on-error: true 

    - name: Create Environments
      run: |
        az ml environment create --file ./environment/pillow.yaml || true
        az ml environment create --file ./environment/tensorflow.yaml || true

    - name: Create Components
      run: |
        # Using a fixed version or a more robust versioning strategy for components is recommended
        # For simplicity, using run_number here, but consider semantic versioning.
        az ml component create --file ./components/dataprep/dataprep.yaml --set version=0.2.${{ github.run_number }}
        az ml component create --file ./components/dataprep/split.yaml --set version=0.2.${{ github.run_number }}
        az ml component create --file ./components/training/training.yaml --set version=0.2.${{ github.run_number }}

    - name: Run Preprocessing Pipeline
      id: preprocessing_job
      run: |
        PREPROCESSING_JOB_NAME="preprocessing-${{ github.sha }}-${{ github.run_id }}"
        echo "Submitting Preprocessing Pipeline: $PREPROCESSING_JOB_NAME"
        az ml job create \
          --file ./pipelines/preprocessing.yaml \
          --stream \
          --set name=$PREPROCESSING_JOB_NAME
        echo "preprocessing_job_name_output=$PREPROCESSING_JOB_NAME" >> $GITHUB_OUTPUT

    - name: Run Training Pipeline (which includes model registration)
      id: training_job
      run: |
        TRAINING_JOB_NAME="training-${{ github.sha }}-${{ github.run_id }}"
        echo "Submitting Training Pipeline: $TRAINING_JOB_NAME"
        # This pipeline (pipelines/training.yaml) now handles model registration internally
        az ml job create \
          --file ./pipelines/training.yaml \
          --stream \
          --set name=$TRAINING_JOB_NAME
        echo "training_job_name_output=$TRAINING_JOB_NAME" >> $GITHUB_OUTPUT

    - name: Get Registered Model Version
      id: get_model_version
      run: |
        echo "Fetching latest version for model: ${{ env.MODEL_NAME_IN_AML }}"
        # Ensure the model name here matches exactly what's registered by the pipeline
        MODEL_VERSION=$(az ml model list --name "${{ env.MODEL_NAME_IN_AML }}" --query "[0].version" -o tsv)
        if [ -z "$MODEL_VERSION" ]; then
          echo "Error: Could not fetch latest version for model ${{ env.MODEL_NAME_IN_AML }}."
          echo "Ensure the model was registered successfully by the training pipeline."
          # List models to help debug:
          az ml model list --output table
          exit 1
        fi
        echo "Latest registered model version is: $MODEL_VERSION"
        echo "model_version_output=$MODEL_VERSION" >> $GITHUB_OUTPUT

    - name: Stop Azure ML Compute (Optional - if not handled by pipeline)
      if: always() 
      run: |
        echo "Attempting to stop Azure ML Compute..."
        az ml compute stop --name ai-training-compute
      continue-on-error: true

    - name: Trigger Model Deployment Workflow
      uses: peter-evans/repository-dispatch@v3
      with:
        token: ${{ secrets.REPO_DISPATCH_PAT }} 
        repository: ${{ env.API_REPOSITORY_FULL_NAME }}
        event-type: new-model-available
        client-payload: '{"run_id": "${{ github.run_id }}", "model_version": "${{ steps.get_model_version.outputs.model_version_output }}", "model_name": "${{ env.MODEL_NAME_IN_AML }}"}'